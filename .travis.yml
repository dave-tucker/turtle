jobs:
  fast_finish: true
  allow_failures:
    - rust: beta
    - rust: nightly
  include:
    - &unit-testing
      stage: Test
      os: linux
      language: rust
      rust: stable
      before_install: &before_install_nix
        # Remove rust-toolchain or we will always use the version specified there
        # regardless of what version is installed
        - rm rust-toolchain
      script: &script_nix
        - rustc --version --verbose
        # -D warnings denies all warnings so that we always know when some code
        # introduces new ones
        - RUSTFLAGS="-D warnings" cargo build --verbose --all
        # Make sure we can run on osx
        - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then cargo run --verbose --example runtest; fi
        # -D warnings denies all warnings so that we always know when some code
        # introduces new ones
        # We use --no-run because if we kept it as part of the next command it would run twice when it fails
        - RUSTFLAGS="-D warnings" cargo test --verbose --features "test" --all --no-run
        # Retry with fewer cores if the initial `cargo test` fails to work around possible OOM errors
        # for more details see https://github.com/rust-lang/cargo/issues/4415
        # Source: https://github.com/ipetkov/conch-runtime/commit/3e6afc5f45791e7793b968712c1ed8ddbe0758fb
        # We need to keep `RUSTFLAGS="-D warnings"` so that this doesn't need to recompile if the above finishes
        - RUSTFLAGS="-D warnings" cargo test --verbose --features "test" --all || (
            echo "$(tput setaf 3)$(tput bold)Initial 'cargo test' failed, retrying with fewer cores to work around Travis CI OOM issues$(tput sgr 0)" &&
            RUSTFLAGS="-D warnings" cargo test --verbose --features "test" --all --jobs 1 -- --test-threads=1
          )
        - cargo doc --no-deps --verbose --all
    - <<: *unit-testing
      rust: beta
    - <<: *unit-testing
      rust: nightly

    - <<: *unit-testing
      os: osx
      rust: stable
    - <<: *unit-testing
      os: osx
      rust: beta
    - <<: *unit-testing
      os: osx
      rust: nightly

    - <<: *unit-testing
      os: windows
      rust: stable
      env: &env_win_x86_64-msvc
        - target=x86_64-pc-windows-msvc
      before_install: &before_install_win
        - rm rust-toolchain
        - rustup toolchain install ${TRAVIS_RUST_VERSION}-${target}
        - rustup set default-host ${target}
        - export RUST_BACKTRACE=1
      script: &script_win
        - cargo build --verbose --all
        # We unfortunately can't actually run any examples because of the bug below,
        # but we can at least make sure they compile on Windows.
        # https://github.com/PistonDevelopers/piston/issues/1202
        - cargo build --verbose --examples
        - cargo test --verbose --features "test" --all    
    - <<: *unit-testing
      os: windows
      rust: beta
      env: *env_win_x86_64-msvc
      before_install: *before_install_win
      script: *script_win
    - <<: *unit-testing
      os: windows
      rust: nightly
      env: *env_win_x86_64-msvc
      before_install: *before_install_win
      script: *script_win

    - <<: *unit-testing
      os: windows
      rust: stable
      env: &env_win_i686-msvc
        - target=i686-pc-windows-msvc
      before_install: *before_install_win
      script: *script_win
    - <<: *unit-testing
      os: windows
      rust: beta
      env: *env_win_i686-msvc
      before_install: *before_install_win
      script: *script_win
    - <<: *unit-testing
      os: windows
      rust: nightly
      env: *env_win_i686-msvc
      before_install: *before_install_win
      script: *script_win

    - <<: *unit-testing
      os: windows
      rust: stable
      env: &env_win_x86_64-gnu
        - target=x86_64-pc-windows-gnu
      before_install: *before_install_win
      script: *script_win
    - <<: *unit-testing
      os: windows
      rust: beta
      env: *env_win_x86_64-gnu
      before_install: *before_install_win
      script: *script_win
    - <<: *unit-testing
      os: windows
      rust: nightly
      env: *env_win_x86_64-gnu
      before_install: *before_install_win
      script: *script_win

    - <<: *unit-testing
      os: windows
      rust: stable
      env: &env_win_i686-gnu
        - target=i686-pc-windows-gnu
      before_install: *before_install_win
      script: *script_win
    - <<: *unit-testing
      os: windows
      rust: beta
      env: *env_win_i686-gnu
      before_install: *before_install_win
      script: *script_win
    - <<: *unit-testing
      os: windows
      rust: nightly
      env: *env_win_i686-gnu
      before_install: *before_install_win
      script: *script_win
